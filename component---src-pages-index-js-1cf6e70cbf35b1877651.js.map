{"version":3,"sources":["webpack:///./src/components/listing.js","webpack:///./src/pages/index.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/header.js","webpack:///./src/components/archive.js","webpack:///./src/components/layout.js","webpack:///./src/components/seo.js"],"names":["LISTING_QUERY","Post","styled","article","withConfig","displayName","componentId","Listing","react_default","a","createElement","gatsby_browser_entry","query","render","_ref","allMarkdownRemark","edges","map","edge","key","node","frontmatter","slug","to","title","date","excerpt","data","_3480134430","IndexPage","location","layout","seo","keywords","Fragment","_471928880","__webpack_require__","d","__webpack_exports__","StaticQuery","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","prop_types__WEBPACK_IMPORTED_MODULE_1__","prop_types__WEBPACK_IMPORTED_MODULE_1___default","gatsby_link__WEBPACK_IMPORTED_MODULE_2__","gatsby_link__WEBPACK_IMPORTED_MODULE_2___default","StaticQueryContext","React","createContext","props","Consumer","staticQueryData","children","propTypes","PropTypes","object","string","isRequired","func","m","module","exports","require","default","ProdPageRenderer","pageResources","loader","getResourcesForPathnameSync","pathname","InternalPageRenderer","Object","assign","json","shape","HeaderWrapper","header","HeaderContainer","div","Header","siteTitle","style","margin","color","textDecoration","defaultProps","POST_ARCHIVE_QUERY","ArchiveContainer","aside","Archive","index","_70734414","MainLayout","main","Layout","site","siteMetadata","web","from","height","styles","overflow","gatsby_image_default","fluid","file","childImageSharp","archive","_1006945595","SEO","description","lang","meta","_public_static_d_2417117884_json__WEBPACK_IMPORTED_MODULE_0__","metaDescription","react__WEBPACK_IMPORTED_MODULE_1___default","react_helmet__WEBPACK_IMPORTED_MODULE_3___default","htmlAttributes","titleTemplate","name","content","property","author","concat","length","join","arrayOf"],"mappings":"2KAIMA,EAAa,aAoBbC,EAAOC,IAAOC,QAAVC,WAAA,CAAAC,YAAA,gBAAAC,YAAA,gBAAGJ,CAAH,0OAoBK,SAASK,IACtB,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEC,MAAOZ,EACPa,OAAQ,SAAAC,GAAA,OAAAA,EAAGC,kBACSC,MAAMC,IAAI,SAAAC,GAAI,OAC9BV,EAAAC,EAAAC,cAACT,EAAD,CAAMkB,IAAKD,EAAKE,KAAKC,YAAYC,MAC/Bd,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMY,GAAE,SAAWL,EAAKE,KAAKC,YAAYC,MACvCd,EAAAC,EAAAC,cAAA,UAAKQ,EAAKE,KAAKC,YAAYG,QAG7BhB,EAAAC,EAAAC,cAAA,SAAIQ,EAAKE,KAAKC,YAAYI,MAC1BjB,EAAAC,EAAAC,cAAA,SAAIQ,EAAKE,KAAKM,SACdlB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMY,GAAE,SAAWL,EAAKE,KAAKC,YAAYC,MAAzC,kBAXRK,KAAAC,ICRWC,UA9BG,SAAAf,GAAA,IAAGgB,EAAHhB,EAAGgB,SAAH,OAChBtB,EAAAC,EAAAC,cAACqB,EAAA,EAAD,CAAQD,SAAUA,GAChBtB,EAAAC,EAAAC,cAACsB,EAAA,EAAD,CAAKR,MAAM,OAAOS,SAAU,mCAC5BzB,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEC,MAAK,YAeLC,OAAQ,SAAAc,GAAI,OACVnB,EAAAC,EAAAC,cAAAF,EAAAC,EAAAyB,SAAA,KACE1B,EAAAC,EAAAC,cAAA,SAAIiB,EAAKZ,kBAAkBC,MAAM,GAAGI,KAAKC,YAAYI,QAlB3DE,KAAAQ,IAsBA3B,EAAAC,EAAAC,cAACH,EAAD,0CClCJ6B,EAAAC,EAAAC,EAAA,sBAAAC,IAAA,IAAAC,EAAAJ,EAAA,GAAAK,EAAAL,EAAAM,EAAAF,GAAAG,EAAAP,EAAA,GAAAQ,EAAAR,EAAAM,EAAAC,GAAAE,EAAAT,EAAA,IAAAU,EAAAV,EAAAM,EAAAG,GAAAT,EAAAC,EAAAC,EAAA,sBAAAQ,EAAArC,IAAA2B,EAAA,SAYMW,EAAqBC,IAAMC,cAAc,IAEzCV,EAAc,SAAAW,GAAK,OACvBT,EAAAhC,EAAAC,cAACqC,EAAmBI,SAApB,KACG,SAAAC,GACC,OACEF,EAAMvB,MACLyB,EAAgBF,EAAMtC,QAAUwC,EAAgBF,EAAMtC,OAAOe,MAEtDuB,EAAMrC,QAAUqC,EAAMG,UAC5BH,EAAMvB,KAAOuB,EAAMvB,KAAKA,KAAOyB,EAAgBF,EAAMtC,OAAOe,MAGvDc,EAAAhC,EAAAC,cAAA,uCA4Bf6B,EAAYe,UAAY,CACtB3B,KAAM4B,IAAUC,OAChB5C,MAAO2C,IAAUE,OAAOC,WACxB7C,OAAQ0C,IAAUI,KAClBN,SAAUE,IAAUI,2BCzDtB,IAAsBC,EAKpBC,EAAOC,SALaF,EAKWG,EAAQ,OALRH,EAAEI,SAAYJ,oGCMzCK,EAAmB,SAAAnD,GAAkB,IAAfgB,EAAehB,EAAfgB,SACpBoC,EAAgBC,UAAOC,4BAA4BtC,EAASuC,UAClE,OAAOrB,IAAMtC,cAAc4D,IAApBC,OAAAC,OAAA,CACL1C,WACAoC,iBACGA,EAAcO,QAIrBR,EAAiBX,UAAY,CAC3BxB,SAAUyB,IAAUmB,MAAM,CACxBL,SAAUd,IAAUE,OAAOC,aAC1BA,YAGUO,w0DCfTU,EAAgBzE,IAAO0E,OAAVxE,WAAA,CAAAC,YAAA,wBAAAC,YAAA,eAAGJ,CAAH,oEAQb2E,EAAkB3E,IAAO4E,IAAV1E,WAAA,CAAAC,YAAA,0BAAAC,YAAA,eAAGJ,CAAH,iDAMf6E,EAAS,SAAAjE,GAAA,IAAGkE,EAAHlE,EAAGkE,UAAH,OACbxE,EAAAC,EAAAC,cAACiE,EAAD,KACEnE,EAAAC,EAAAC,cAACmE,EAAD,KACErE,EAAAC,EAAAC,cAAA,MAAIuE,MAAO,CAAEC,OAAQ,IACnB1E,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEY,GAAG,IACH0D,MAAO,CACLE,MAAK,QACLC,eAAc,SAGfJ,OAOXD,EAAOzB,UAAY,CACjB0B,UAAWzB,IAAUE,QAGvBsB,EAAOM,aAAe,CACpBL,UAAS,IAGID,iBC1CTO,EAAkB,WAkBlBC,EAAmBrF,IAAOsF,MAAVpF,WAAA,CAAAC,YAAA,4BAAAC,YAAA,YAAGJ,CAAH,2GA2CPuF,MA5Bf,WACE,OACEjF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEC,MAAO0E,EACPzE,OAAQ,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,kBAAH,OACNP,EAAAC,EAAAC,cAAAF,EAAAC,EAAAyB,SAAA,KACE1B,EAAAC,EAAAC,cAAC6E,EAAD,KACE/E,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,UACGK,EAAkBC,MAAMC,IAAI,SAACC,EAAMwE,GAAP,OAC3BlF,EAAAC,EAAAC,cAAA,MAAIS,IAAKuE,GACN,IACDlF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMY,GAAE,SAAWL,EAAKE,KAAKC,YAAYC,MACtC,IACAJ,EAAKE,KAAKC,YAAYG,cAZvCG,KAAAgE,MCtBAC,UAAa1F,IAAO2F,KAAVzF,WAAA,CAAAC,YAAA,qBAAAC,YAAA,YAAGJ,CAAH,4FAQV4F,EAAS,SAAAhF,GAAA,IAAGuC,EAAHvC,EAAGuC,SAAUvB,EAAbhB,EAAagB,SAAb,OACbtB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEC,MAAK,aAgBLC,OAAQ,SAAAc,GAAI,OACVnB,EAAAC,EAAAC,cAAAF,EAAAC,EAAAyB,SAAA,KACE1B,EAAAC,EAAAC,cAACkE,EAAD,CAAQI,UAAWrD,EAAKoE,KAAKC,aAAaxE,QAI1ChB,EAAAC,EAAAC,cAACuF,EAAA,EAAD,CACEC,KAAM,CAAEC,OAA8B,MAAtBrE,EAASuC,SAAmB,IAAM,KAClD9C,GAAI,CAAE4E,OAA8B,MAAtBrE,EAASuC,SAAmB,IAAM,MAE/C,SAAA+B,GAAM,OACL5F,EAAAC,EAAAC,cAAA,OAAKuE,MAAKV,OAAAC,OAAA,CAAI6B,SAAU,UAAaD,IACnC5F,EAAAC,EAAAC,cAAC4F,EAAA7F,EAAD,CAAK8F,MAAO5E,EAAK6E,KAAKC,gBAAgBF,WAI5C/F,EAAAC,EAAAC,cAACkF,EAAD,KACEpF,EAAAC,EAAAC,cAAA,YAAO2C,GACP7C,EAAAC,EAAAC,cAACgG,EAAD,SAnCR/E,KAAAgF,KA0CFb,EAAOxC,UAAY,CACjBD,SAAUE,IAAUnC,KAAKsC,YAG3BoC,EAAOT,aAAe,CACpBvD,SAAU,IAGGgE,uGCjEf,SAASc,EAAT9F,GAA2D,IAA5C+F,EAA4C/F,EAA5C+F,YAAaC,EAA+BhG,EAA/BgG,KAAMC,EAAyBjG,EAAzBiG,KAAM9E,EAAmBnB,EAAnBmB,SAAUT,EAASV,EAATU,MACxCuE,EADiDiB,EAAArF,KACjDoE,KAcFkB,EAAkBJ,GAAed,EAAKC,aAAaa,YAEzD,OACEK,EAAAzG,EAAAC,cAACyG,EAAA1G,EAAD,CACE2G,eAAgB,CACdN,QAEFtF,MAAOA,EACP6F,cAAa,QAAUtB,EAAKC,aAAaxE,MACzCuF,KAAM,CACJ,CACEO,KAAI,cACJC,QAASN,GAEX,CACEO,SAAQ,WACRD,QAAS/F,GAEX,CACEgG,SAAQ,iBACRD,QAASN,GAEX,CACEO,SAAQ,UACRD,QAAO,WAET,CACED,KAAI,eACJC,QAAO,WAET,CACED,KAAI,kBACJC,QAASxB,EAAKC,aAAayB,QAE7B,CACEH,KAAI,gBACJC,QAAS/F,GAEX,CACE8F,KAAI,sBACJC,QAASN,IAGVS,OACCzF,EAAS0F,OAAS,EACd,CACEL,KAAI,WACJC,QAAStF,EAAS2F,KAAT,OAEX,IAELF,OAAOX,KAKhBH,EAAIvB,aAAe,CACjByB,KAAI,KACJC,KAAM,GACN9E,SAAU,GACV4E,YAAW,IAGbD,EAAItD,UAAY,CACduD,YAAatD,IAAUE,OACvBqD,KAAMvD,IAAUE,OAChBsD,KAAMxD,IAAUsE,QAAQtE,IAAUC,QAClCvB,SAAUsB,IAAUsE,QAAQtE,IAAUE,QACtCjC,MAAO+B,IAAUE,OAAOC,YAGXkD","file":"component---src-pages-index-js-1cf6e70cbf35b1877651.js","sourcesContent":["import React from \"react\"\r\nimport { Link, StaticQuery, graphql } from \"gatsby\"\r\nimport styled from \"styled-components\"\r\n\r\nconst LISTING_QUERY = graphql`\r\n  query BlogPostListing {\r\n    allMarkdownRemark(\r\n      limit: 5\r\n      sort: { order: DESC, fields: [frontmatter___date] }\r\n    ) {\r\n      edges {\r\n        node {\r\n          excerpt\r\n          frontmatter {\r\n            title\r\n            date(formatString: \"MMMM, DD YYYY\")\r\n            slug\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nconst Post = styled.article`\r\n  font-family: monserrat;\r\n  box-shadow: 0px 3px 10px rgba(25, 17, 34, 0.05);\r\n  padding: 1rem;\r\n  border-radius: 4px;\r\n  margin-bottom: 1rem;\r\n  a h2 {\r\n    color: black;\r\n    text-decoration: none;\r\n    font-size: 1.2rem;\r\n  }\r\n  a {\r\n    text-decoration: none;\r\n    color: coral;\r\n  }\r\n  p {\r\n    font-size: 0.8rem;\r\n  }\r\n`\r\n\r\nexport default function Listing() {\r\n  return (\r\n    <StaticQuery\r\n      query={LISTING_QUERY}\r\n      render={({ allMarkdownRemark }) =>\r\n        allMarkdownRemark.edges.map(edge => (\r\n          <Post key={edge.node.frontmatter.slug}>\r\n            <Link to={`/posts${edge.node.frontmatter.slug}`}>\r\n              <h2>{edge.node.frontmatter.title}</h2>\r\n            </Link>\r\n\r\n            <p>{edge.node.frontmatter.date}</p>\r\n            <p>{edge.node.excerpt}</p>\r\n            <Link to={`/posts${edge.node.frontmatter.slug}`}>Read More </Link>\r\n          </Post>\r\n        ))\r\n      }\r\n    />\r\n  )\r\n}\r\n","import React from \"react\"\nimport { StaticQuery, graphql } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\n\nimport SEO from \"../components/seo\"\nimport Listing from \"../components/listing\"\n\nconst IndexPage = ({ location }) => (\n  <Layout location={location}>\n    <SEO title=\"Home\" keywords={[`gatsby`, `application`, `react`]} />\n    <h1>Hi people</h1>\n    <StaticQuery\n      query={graphql`\n        query theQuery {\n          allMarkdownRemark {\n            edges {\n              node {\n                frontmatter {\n                  title\n                  slug\n                  date(formatString: \"YY-MM-DD\")\n                }\n              }\n            }\n          }\n        }\n      `}\n      render={data => (\n        <>\n          <p>{data.allMarkdownRemark.edges[0].node.frontmatter.date}</p>\n        </>\n      )}\n    />\n    <Listing />\n  </Layout>\n)\n\nexport default IndexPage\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\n\nconst StaticQueryContext = React.createContext({})\n\nconst StaticQuery = props => (\n  <StaticQueryContext.Consumer>\n    {staticQueryData => {\n      if (\n        props.data ||\n        (staticQueryData[props.query] && staticQueryData[props.query].data)\n      ) {\n        return (props.render || props.children)(\n          props.data ? props.data.data : staticQueryData[props.query].data\n        )\n      } else {\n        return <div>Loading (StaticQuery)</div>\n      }\n    }}\n  </StaticQueryContext.Consumer>\n)\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away,. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n.` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n}\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\nimport loader from \"./loader\"\n\nconst ProdPageRenderer = ({ location }) => {\n  const pageResources = loader.getResourcesForPathnameSync(location.pathname)\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","import { Link } from \"gatsby\"\nimport PropTypes from \"prop-types\"\nimport React from \"react\"\n\nimport styled from \"styled-components\"\n\nconst HeaderWrapper = styled.header`\n  background: coral;\n  margin-bottom: 1.45rem;\n  img {\n    margin-bottom: 0px;\n  }\n`\n\nconst HeaderContainer = styled.div`\n  margin: 0 auto;\n  max-width: 960px;\n  padding: 1rem;\n`\n\nconst Header = ({ siteTitle }) => (\n  <HeaderWrapper>\n    <HeaderContainer>\n      <h1 style={{ margin: 0 }}>\n        <Link\n          to=\"/\"\n          style={{\n            color: `white`,\n            textDecoration: `none`,\n          }}\n        >\n          {siteTitle}\n        </Link>\n      </h1>\n    </HeaderContainer>\n  </HeaderWrapper>\n)\n\nHeader.propTypes = {\n  siteTitle: PropTypes.string,\n}\n\nHeader.defaultProps = {\n  siteTitle: ``,\n}\n\nexport default Header\n","import React from \"react\"\r\nimport { StaticQuery, graphql, Link } from \"gatsby\"\r\nimport styled from \"styled-components\"\r\n\r\nconst POST_ARCHIVE_QUERY = graphql`\r\n  query BlogPostArchive {\r\n    allMarkdownRemark(\r\n      limit: 5\r\n      sort: { order: DESC, fields: [frontmatter___date] }\r\n    ) {\r\n      edges {\r\n        node {\r\n          frontmatter {\r\n            title\r\n            slug\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nconst ArchiveContainer = styled.aside`\r\n  font-family: avenir;\r\n\r\n  text-align: center;\r\n\r\n  li {\r\n    list-style-type: none;\r\n  }\r\n\r\n  a {\r\n    text-decoration: none;\r\n    color: darkgrey;\r\n  }\r\n`\r\n\r\nfunction Archive() {\r\n  return (\r\n    <div>\r\n      <StaticQuery\r\n        query={POST_ARCHIVE_QUERY}\r\n        render={({ allMarkdownRemark }) => (\r\n          <>\r\n            <ArchiveContainer>\r\n              <h3>Archive</h3>\r\n              <ul>\r\n                {allMarkdownRemark.edges.map((edge, index) => (\r\n                  <li key={index}>\r\n                    {\" \"}\r\n                    <Link to={`/posts${edge.node.frontmatter.slug}`}>\r\n                      {\" \"}\r\n                      {edge.node.frontmatter.title}\r\n                    </Link>\r\n                  </li>\r\n                ))}\r\n              </ul>\r\n            </ArchiveContainer>\r\n          </>\r\n        )}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Archive\r\n","/**\n * Layout component that queries for data\n * with Gatsby's StaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { StaticQuery, graphql } from \"gatsby\"\nimport styled from \"styled-components\"\nimport { Spring } from \"react-spring\"\nimport Img from \"gatsby-image\"\n\nimport Header from \"./header\"\nimport Archive from \"./archive\"\nimport \"./layout.css\"\n\nconst MainLayout = styled.main`\n  max-width: 90%;\n  margin: 0 auto;\n  display: grid;\n  grid-template-columns: 4fr 1fr;\n  grid-gap: 40px;\n`\n\nconst Layout = ({ children, location }) => (\n  <StaticQuery\n    query={graphql`\n      query SiteTitleQuery {\n        site {\n          siteMetadata {\n            title\n          }\n        }\n        file(relativePath: { regex: \"/bg/\" }) {\n          childImageSharp {\n            fluid(maxWidth: 1000) {\n              ...GatsbyImageSharpFluid\n            }\n          }\n        }\n      }\n    `}\n    render={data => (\n      <>\n        <Header siteTitle={data.site.siteMetadata.title} />\n        {/*  {location.pathname === \"/\" && (\n          <Img fluid={data.file.childImageSharp.fluid} />\n        )} */}\n        <Spring\n          from={{ height: location.pathname === \"/\" ? 100 : 200 }}\n          to={{ height: location.pathname === \"/\" ? 200 : 100 }}\n        >\n          {styles => (\n            <div style={{ overflow: \"hidden\", ...styles }}>\n              <Img fluid={data.file.childImageSharp.fluid} />\n            </div>\n          )}\n        </Spring>\n        <MainLayout>\n          <main>{children}</main>\n          <Archive />\n        </MainLayout>\n      </>\n    )}\n  />\n)\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nLayout.defaultProps = {\n  location: {},\n}\n\nexport default Layout\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction SEO({ description, lang, meta, keywords, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ]\n        .concat(\n          keywords.length > 0\n            ? {\n                name: `keywords`,\n                content: keywords.join(`, `),\n              }\n            : []\n        )\n        .concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  keywords: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  keywords: PropTypes.arrayOf(PropTypes.string),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n"],"sourceRoot":""}